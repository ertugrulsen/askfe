{"remainingRequest":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\src\\services\\QuestionService.js","dependencies":[{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\src\\services\\QuestionService.js","mtime":1615592727949},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/ErtugrulSen/Desktop/visual Studio Project/AskDefinexFrontEnd/askdefinex-ui/src/services/QuestionService.js"],"names":["ApiCall","QuestionService","request","headers","Accept","Authorization","localStorage","getItem","Promise","resolve","reject","api","AxiosGetAll","currentPage","then","response","catch","error","AxiosGetWithId","id","text","AxiosPost","console","log","data","AxiosDelete"],"mappings":"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","sourcesContent":["import ApiCall from '../library/helpers/apicall'\r\n\r\nexport default class QuestionService {\r\n  // get All Unanswered\r\n  static async GetAllUnanswered (request) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosGetAll('AskQuestion/GetUnansweredQuestions?Count=10&StartOffSet='+request.currentPage, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n  // get All Questions\r\n  static async Get (request) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosGetWithId('AskQuestion/GetQuestionWithAnswers?id='+request.id ,{}, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n  // get All Questions\r\n  static async GetAll (request) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosGetAll('AskQuestion/GetAllQuestionsForMain?Count=10&StartOffSet='+request.currentPage , headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n  // get MostVoted Questions\r\n  static async GetMostVoted (request) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosGetAll('AskQuestion/GetMostUpVotedQuestions?Count=10&StartOffSet='+request.currentPage, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  // get searched Questions\r\n  static async Search (text) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosGetAll('AskQuestion/Search?text='+text, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  static async VoteIncrease (request) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosPost('AskQuestion/QuestionUpdateUpVote', request, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  static async VoteDecrease (request) {\r\n    console.log(\"VoteDecrease queston\",request)\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosPost('AskQuestion/QuestionUpdateDownVote', request, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  // Close\r\n  static async Close (data) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosPost('AskQuestion/QuestionIsClosed', data, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  // update Question\r\n  static async Update (data) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosPost('AskQuestion/UpdateQuestion', data, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  // delete Question\r\n  static async Delete (data) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosDelete('AskQuestion/DeleteQuestion', data, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  // add\r\n  static async Add (data) {\r\n    const headers = { Accept: 'application/json', 'Content-Type': 'application/json', Authorization: 'Bearer ' + localStorage.getItem('accesstoken') }\r\n    return await new Promise((resolve, reject) => {\r\n      const api = new ApiCall()\r\n      api.AxiosPost('AskQuestion/CreateQuestion', data, headers)\r\n        .then(response => {\r\n          resolve(response)\r\n        })\r\n        .catch(error => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n}\r\n"]}]}