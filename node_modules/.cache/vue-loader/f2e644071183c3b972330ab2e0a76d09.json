{"remainingRequest":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\src\\views\\pages\\home\\Home.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\src\\views\\pages\\home\\Home.vue","mtime":1615731941204},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICJob21lLmNzcyI7DQo="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA","file":"Home.vue","sourceRoot":"src/views/pages/home","sourcesContent":["<template>\r\n  <v-container class=\"main-tabs\" >\r\n    <v-card >\r\n      <v-tabs\r\n        v-model=\"tabs\"\r\n        fixed-tabs >\r\n        <v-tabs-slider></v-tabs-slider>\r\n        <v-tab\r\n          href=\"#mobile-tabs-5-1\"\r\n          class=\"primary--text\"  >\r\n          {{ GetLabel(this, 'all_question') }}\r\n        </v-tab>\r\n        <v-tab\r\n          href=\"#mobile-tabs-5-2\"\r\n          class=\"primary--text\"  >\r\n          {{ GetLabel(this, 'all_unanswered') }}\r\n        </v-tab>\r\n        <v-tab\r\n          href=\"#mobile-tabs-5-3\"\r\n          class=\"primary--text\" >\r\n          {{ GetLabel(this, 'most_viewed') }}\r\n        </v-tab>\r\n      </v-tabs>\r\n      <v-tabs-items v-model=\"tabs\">\r\n        <v-tab-item\r\n          :key=\"1\"\r\n          :value=\"'mobile-tabs-5-' + 1\" >\r\n          <v-list three-line>\r\n            <template v-if=\"allQuestion.length === 0\">\r\n              <v-skeleton-loader v-for=\"item in [1,2,3,4]\" :key=\"item\"\r\n                v-bind=\"attrs\"\r\n                type=\"list-item-avatar-three-line\">\r\n              </v-skeleton-loader>\r\n            </template>\r\n            <question v-else v-for=\"item in allQuestion\" :key=\"item.id\" v-bind:question=\"item\" />\r\n            <div v-intersect=\"{handler: onIntersect1}\"></div>\r\n            <v-progress-linear v-if=\"request1IsWorking && allQuestion.length > 0\" class=\"progress\" indeterminate color=\"cyan\" ></v-progress-linear>\r\n          </v-list>\r\n        </v-tab-item>\r\n        <v-tab-item\r\n          :key=\"2\"\r\n          :value=\"'mobile-tabs-5-' + 2\" >\r\n          <v-list three-line>\r\n            <template v-if=\"allUnanswered.length === 0\">\r\n              <v-subheader> {{ GetLabel(this, 'question_not_found') }} </v-subheader>\r\n            </template>\r\n            <question v-else v-for=\"item in allUnanswered\" :key=\"item.id\" v-bind:question=\"item\" />\r\n            <div v-intersect=\"{handler: onIntersect2}\"></div>\r\n            <v-progress-linear v-if=\"request2IsWorking && allUnanswered.length > 0\" class=\"progress\" indeterminate color=\"cyan\" ></v-progress-linear>\r\n          </v-list>\r\n        </v-tab-item>\r\n        <v-tab-item\r\n          :key=\"3\"\r\n          :value=\"'mobile-tabs-5-' + 3\" >\r\n          <v-list three-line>\r\n            <template v-if=\"mostVoted.length === 0\">\r\n              <v-subheader> {{ GetLabel(this, 'question_not_found') }} </v-subheader>\r\n            </template>\r\n            <question v-else v-for=\"item in mostVoted\" :key=\"item.id\" v-bind:question=\"item\" />\r\n            <div v-intersect=\"{handler: onIntersect3}\"></div>\r\n            <v-progress-linear v-if=\"request3IsWorking && mostVoted.length > 0\" class=\"progress\" indeterminate color=\"cyan\" ></v-progress-linear>\r\n          </v-list>\r\n        </v-tab-item>\r\n      </v-tabs-items>\r\n    </v-card>\r\n    <span ref=\"lastElement\"></span>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport question from '../../../components/question/question'\r\nimport { ALL_QUESTION, ALL_MOST_VOTED, ALL_UNANSWERED } from '../../../store/actions/question'\r\nimport moment from 'moment'\r\n\r\n// data part is example\r\nexport default {\r\n  name: 'Home',\r\n  data () {\r\n    return {\r\n      attrs: {\r\n        class: 'm-3',\r\n        elevation: 1\r\n      },\r\n      allQuestion: [],\r\n      allUnanswered: [],\r\n      mostVoted: [],\r\n      tabs: null,\r\n      currentPage: 0,\r\n      currentPageMostVoted: 0,\r\n      currentPageUnanswered: 0,\r\n      text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.'\r\n    }\r\n  },\r\n  components: {\r\n    question\r\n  },\r\n  created () {\r\n    this.GetQuestionAll()\r\n    this.GetUnanswered()\r\n    this.GetMostVoted()\r\n    window.addEventListener('scroll', this.handleScroll)\r\n  },\r\n  destroyed () {\r\n    window.removeEventListener('scroll', this.handleScroll)\r\n  },\r\n  watch: {\r\n    offsetTop (val) {\r\n      console.log(val)\r\n      //  this.callbackFunc()\r\n    }\r\n  },\r\n  methods: {\r\n    handleScroll: function (e) {\r\n      if (this.isElementInViewport(this.$refs.lastElement)) {\r\n        console.log('request for next page')\r\n      }\r\n    },\r\n    isElementInViewport (el) {\r\n      var rect = el.getBoundingClientRect()\r\n      return (\r\n        rect.top >= 0 &&\r\n        rect.left >= 0 &&\r\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\r\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth)\r\n      )\r\n    },\r\n    GetQuestionAll: function () {\r\n      this.allQuestion = []\r\n      this.$store.dispatch(ALL_QUESTION, { currentPage: this.currentPage }).then(() => {\r\n        console.log(this.$store.getters.allQuestion.data.Response)\r\n        this.$store.getters.allQuestion.data.Response.forEach(element => {\r\n          element.CreateTime = moment(String(element.CreateDate)).format('HH:mm')\r\n          element.CreateDate = moment(String(element.CreateDate)).format('DD/MM/YYYY')\r\n          this.allQuestion.push(element)\r\n        })\r\n        this.request1IsWorking = false\r\n      })\r\n    },\r\n    GetUnanswered: function () {\r\n      this.$store.dispatch(ALL_UNANSWERED, { currentPage: this.currentPageUnanswered }).then(() => {\r\n        this.$store.getters.allUnanswered.data.Response.forEach(element => {\r\n          element.CreateTime = moment(String(element.CreateDate)).format('HH:MM')\r\n          element.CreateDate = moment(String(element.CreateDate)).format('DD/MM/YYYY')\r\n          this.allUnanswered.push(element)\r\n        })\r\n        this.request2IsWorking = false\r\n      })\r\n    },\r\n    GetMostVoted: function () {\r\n      this.$store.dispatch(ALL_MOST_VOTED, { currentPage: this.currentPageMostVoted }).then(() => {\r\n        this.$store.getters.mostVoted.data.Response.forEach(element => {\r\n          element.CreateTime = moment(String(element.CreateDate)).format('HH:MM')\r\n          element.CreateDate = moment(String(element.CreateDate)).format('DD/MM/YYYY')\r\n          this.mostVoted.push(element)\r\n        })\r\n        this.request3IsWorking = false\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n@import \"home.css\";\r\n</style>\r\n"]}]}