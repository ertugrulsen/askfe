{"remainingRequest":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\src\\views\\pages\\askQuestion\\askQuestion.vue?vue&type=style&index=0&id=21b89c0c&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\src\\views\\pages\\askQuestion\\askQuestion.vue","mtime":1615668965266},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\ErtugrulSen\\Desktop\\visual Studio Project\\AskDefinexFrontEnd\\askdefinex-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5xdWlsbC1jb250YWluZXJ7DQogIGhlaWdodDogMjUwcHg7DQp9DQoucXVpbGwtZWRpdG9yew0KICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDY1cHgpDQp9DQo="},{"version":3,"sources":["askQuestion.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA;AACA;AACA;AACA","file":"askQuestion.vue","sourceRoot":"src/views/pages/askQuestion","sourcesContent":["<template>\r\n  <v-container >\r\n    <v-card class=\"pa-2 \">\r\n      <v-row :align=\"center\" no-gutters>\r\n        <v-col cols=\"12\" class=\"px-3 text-center\">\r\n          <v-form  ref=\"form\" v-model=\"valid\" lazy-validation>\r\n            <v-card-title>{{ GetLabel(this, 'navbar_ask_question') }}</v-card-title>\r\n            <dxFormTextInput id=\"question_title\"  ref=\"titleComponentRef\" v-model=\"title\" placeholder=\"question_title\" :clear=\"true\" :isRequired=true />\r\n          </v-form>\r\n        </v-col>\r\n        <v-col cols=\"12\" class=\"px-3 pa-3 text-center quill-container\">\r\n        <!-- Or manually control the data synchronization -->\r\n          <quill-editor\r\n            :content=\"content\"\r\n            :options=\"editorOption\"\r\n            @change=\"onEditorChange($event)\"\r\n            :isRequired=true />\r\n        </v-col>\r\n        <v-col cols=\"12\" class=\"px-3\">\r\n          <v-alert v-if=\"this.content === ''\"\r\n                dense\r\n                outlined\r\n                type=\"error\"\r\n              >\r\n              {{ GetLabel(this, 'warning_question_body') }}\r\n          </v-alert>\r\n        </v-col>\r\n        <v-col cols=\"12\" class=\"px-3 text-center\">\r\n          <v-btn color=\"btn btn-lg primary btn-block\"  @click=\"askQuestion\">\r\n            {{ GetLabel(this, 'navbar_ask_question') }}\r\n          </v-btn>\r\n        </v-col>\r\n      </v-row>\r\n    </v-card>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport dxFormTextInput from '../../../components/customcontrols/dxInput/dxFormTextInput/dxFormTextInput'\r\nimport { ADD_QUESTION } from '../../../store/actions/question'\r\nimport 'quill/dist/quill.core.css'\r\nimport 'quill/dist/quill.snow.css'\r\nimport 'quill/dist/quill.bubble.css'\r\n\r\nimport { quillEditor } from 'vue-quill-editor'\r\n\r\nexport default {\r\n  name: 'AskQuestion',\r\n  data () {\r\n    return {\r\n      tags: [],\r\n      content: ``,\r\n      editorOption: {},\r\n      center: 'center',\r\n      title: '',\r\n      valid: ''\r\n    }\r\n  },\r\n  computed: {\r\n    editor () {\r\n      return this.$refs.myQuillEditor.quill\r\n    }\r\n  },\r\n  components: {\r\n    dxFormTextInput,\r\n    quillEditor\r\n  },\r\n  methods: {\r\n    onEditorChange ({ quill, html, text }) {\r\n      this.content = html\r\n    },\r\n    askQuestion: function () {\r\n      if (!this.$refs.form.validate()) {\r\n        return\r\n      }\r\n\r\n      if (this.content === null || this.content === \"\") {\r\n        return\r\n      }\r\n\r\n      this.$store.dispatch(ADD_QUESTION, {\r\n        Header: this.$refs.titleComponentRef.inputVal,\r\n        Detail: this.content,\r\n        UserId: JSON.parse(localStorage.getItem('currentUser')).UserId,\r\n        IsActive: true,\r\n        IsAccepted: true\r\n      }).then(response => {\r\n        if (this.$store.getters.questionId.Id !== '') {\r\n          this.$router.push({ name: 'QuestionDetail', query: { id: this.$store.getters.questionId } })\r\n        } else if (this.$store.getters.questionId.IsSucceed === false) {\r\n          this.$dialog.alert(this.GetErrorMessage(this, this.$store.getters.questionId.ErrorCode), this.alertoptions) \r\n        }\r\n      }).catch(errorCode => { this.$dialog.alert(this.GetErrorMessage(this, errorCode), this.alertoptions) })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.quill-container{\r\n  height: 250px;\r\n}\r\n.quill-editor{\r\n  height: calc(100% - 65px)\r\n}\r\n</style>\r\n\r\n"]}]}